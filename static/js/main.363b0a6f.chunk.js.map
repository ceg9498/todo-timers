{"version":3,"sources":["component/Welcome.tsx","component/Navbar.tsx","helpers/Reset.tsx","data/data.tsx","component/addForm.tsx","component/DisplaySnack.tsx","component/options.tsx","component/DisplayDialog.tsx","component/Timer.tsx","component/ListTimers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Welcome","_useState","useState","_useState2","Object","slicedToArray","isOpen","setOpen","react_default","a","createElement","Dialog","onClose","aria-labelledby","open","DialogTitle","id","DialogContent","DialogContentText","welcomeText","p1","p2","p3","p4","p5","DialogActions","Button","onClick","Navbar","props","AppBar","position","Tabs","value","onChange","handleTabChange","role","Tab","label","icon","Icon","DAYS_IN_WEEK","setReset","period","data","split","result","Date","amount","parseInt","setMinutes","getMinutes","setHours","getHours","setDate","getDate","console","error","useUTC","index","distance","hours","minutes","daysofweek","map","str","indexOf","getDay","getUTCHours","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","day","err","return","setUTCHours","setUTCMinutes","setSeconds","setMilliseconds","checkResets","targetTime","valueOf","DB_VER","initIDB","Promise","resolve","reject","window","request","indexedDB","onerror","event","onupgradeneeded","store","target","createObjectStore","keyPath","autoIncrement","onsuccess","objStoreReq","transaction","objectStore","getAll","forEach","item","resetTime","tempSubItems","completed","subItem","push","concat","isCompleted","warn","addOrUpdateOne","countdown","put","oncomplete","AddForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","name","type","checked","verifyUnit","checkDaysState","setState","defineProperty","clearForm","title","required","timerType","hour","minute","allDays","partialDays","days","sun","mon","tue","wed","thu","fri","sat","unitValue","unitType","description","category","daysObj","state","valuesArr","includes","intervalPeriod","regularPeriod","useGlobalTime","offsetTotal","getTimezoneOffset","offsetHours","Math","floor","offsetMinutes","calculateDayOfWeek","handleSubmit","preventDefault","timer","addTimer","min","max","Number","isNaN","DoW","_this2","autoComplete","className","TextField","margin","e","FormControlLabel","control","Switch","FormControl","component","FormLabel","RadioGroup","Radio","Fragment","Input","Tooltip","placement","Checkbox","indeterminate","InputLabel","htmlFor","Select","native","inputProps","multiline","fullWidth","variant","color","React","Component","DisplaySnack","isSnackOpen","message","closeSnack","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","aria-describedby","Options","setOptions","optionsState","isDeleteOpen","setDeleteOpen","_useState3","_useState4","setSnackOpen","_useState5","_useState6","snackMsg","setSnackMsg","hideCompleted","viewSlim","DeleteConf","close","setSnack","clear","then","deleteHandler","DisplayDialog","closeDialog","deleteItem","toLocaleString","Timer","completedBorderStyle","borderColor","completedBGStyle","backgroundColor","largePadStyle","top","width","height","largeCardStyle","alignItems","titleStyle","descriptionStyle","overflowY","styles","completedBorder","completedBG","card","pad","style","_objectSpread","toDateString","IconButton","aria-label","info","log","delete","ListTimers","filtered","openDialog","key","Timer_Timer","App","setCategories","categories","shift","pop","openSnack","catch","createTimeout","source","infoReq","get","deleteOne","entry","handleReset","items","hasReset","timeout","clearTimeout","nextReset","timeoutMS","now","setTimeout","createCountdown","clearInterval","interval","setInterval","tickCountdown","remainingMS","cdString","seconds","toString","padStart","dataArr","nID","ids","section","displayAddForm","newValue","snack","reason","i","dialog","options","App_objectSpread","_this3","sectionId","Typography","hidden","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","filterList","filter","addForm_AddForm","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.363b0a6f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n/* MaterialUI's Dialog Compoents */\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function Welcome(){\r\n  const [isOpen, setOpen] = useState(true);\r\n  return(\r\n    <Dialog \r\n      onClose={()=>setOpen(false)}\r\n      aria-labelledby=\"dialog-title\"\r\n      open={isOpen}>\r\n        <DialogTitle id=\"dialog-title\">\r\n          Welcome!\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {welcomeText.p1}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {welcomeText.p2}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {welcomeText.p3}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {welcomeText.p4}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {welcomeText.p5}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>setOpen(false)}>\r\n            I Understand\r\n          </Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nconst welcomeText = {\r\n  p1: \"Hello, and welcome to the To-Do app made specifically for repeating tasks! Before you get started, I'd like to tell you a bit about how your data is saved.\",\r\n  p2: \"Any data that you put into this app - task names, dates, times, and so on - is stored on your machine. The app's creator will never see it. If you wish to delete your data, you can do so under the 'Settings' tab.\",\r\n  p3: \"There are, however, some drawbacks to this! This app will only work with one device; you won't be able to view the information provided on one device while using the app on another device; if you use it on a shared device (such as a family computer, or one in a public location), others who use the device would be able to see your data. In addition, since the data is stored on your machine, it will take up some local space. I've done my best to keep the amount of space taken to be really small, but if you provide long descriptions or have a lot of timers, it might get a bit big.\",\r\n  p4: \"If you decide not to provide any data, or choose to delete your data from the settings menu, nothing will be saved on your device.\",\r\n  p5: \"Happy To-do-ing!\"\r\n}","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nexport default function Navbar(props){\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Tabs value={props.value} \r\n        onChange={props.handleTabChange} \r\n        role=\"navigation\">\r\n        <Tab label=\"All Timers\" icon={<Icon>access_time</Icon>} />\r\n        <Tab label=\"Add Timer\" icon={<Icon>add</Icon>} />\r\n        <Tab label=\"Settings\" icon={<Icon>settings</Icon>} />\r\n      </Tabs>\r\n    </AppBar>\r\n  );\r\n}","const DAYS_IN_WEEK = 7;\r\n\r\nexport function setReset(period:String):Date{\r\n  let data = period.split('.');\r\n  let result = new Date();\r\n  // for \"interval\" type timers\r\n  if(data[0] === 'i'){\r\n    let amount = parseInt(data[1]);\r\n    let unit = data[2];\r\n    switch(unit){\r\n      case \"minutes\":\r\n        result.setMinutes(result.getMinutes() + amount);\r\n        break;\r\n      case \"hours\":\r\n        result.setHours(result.getHours() + amount);\r\n        break;\r\n      case \"days\":\r\n        result.setDate(result.getDate() + amount);\r\n        break;\r\n      default:\r\n        console.error(\"ERROR: interval unit not recognized.\");\r\n    }\r\n  } else if(data[0][0] === 'r'){\r\n    // for \"regular\" type timers\r\n    // data[0][1] is 'l' for local time or 'g' for global(UTC) time\r\n    let useUTC = false;\r\n    if(data[0][1] === 'g'){\r\n      useUTC = true;\r\n    }\r\n    /* \r\n      0: 'r(g/l)'\r\n      1: year // currently unused\r\n      2: month // currently unused\r\n      3: day of month // currently unused\r\n      4: hours\r\n      5: minutes\r\n      6: days of week\r\n    */\r\n    let hours = parseInt(data[4]);\r\n    let minutes = parseInt(data[5]);\r\n    let dayStrings = data[6].split('');\r\n    let daysofweek = dayStrings.map(str=>{\r\n      return parseInt(str);\r\n    });\r\n\r\n    // this logic block is specifically for Days of Week\r\n    let index:number;\r\n    let distance:number;\r\n\r\n    // if today is a reset day\r\n    if(daysofweek.indexOf(result.getDay()) > -1){\r\n      // get the index of the day of week\r\n      index = daysofweek.indexOf(result.getDay());\r\n\r\n      // if the target hours are later than current hour:\r\n      // make sure to check against UTC if the timer is Global\r\n      let currentHours:number;\r\n      if(useUTC){\r\n        currentHours = result.getUTCHours();\r\n      } else {\r\n        currentHours = result.getHours()\r\n      }\r\n      if(currentHours >= hours) {\r\n        if(daysofweek.length === 1){\r\n          // when there's only one day, set the result to the next occurance\r\n          distance = 7;\r\n        } else {\r\n          // set the reset to the next day\r\n          index++;\r\n          distance = (DAYS_IN_WEEK + daysofweek[index] - result.getDay()) % 7;\r\n        }\r\n      } else {\r\n        // when the hours haven't passed, it's the same day.\r\n        distance = 0;\r\n      }\r\n    } else {\r\n      // get the next day of week from today, and use it as the index\r\n      for(let day of daysofweek){\r\n        if(day > result.getDay()){\r\n          distance = (DAYS_IN_WEEK + day - result.getDay()) % 7;\r\n          break;\r\n        }\r\n      }\r\n      // for loop will fail to set day if the next occurance has already passed\r\n      if(distance === undefined){\r\n        distance = (DAYS_IN_WEEK + daysofweek[0] - result.getDay()) % 7;\r\n      }\r\n    }\r\n    // calculate & set the date\r\n    result.setDate(result.getDate() + distance);\r\n\r\n    if(useUTC){\r\n      result.setUTCHours(hours);\r\n      result.setUTCMinutes(minutes);\r\n    } else {\r\n      result.setHours(hours);\r\n      result.setMinutes(minutes);\r\n    }\r\n    result.setSeconds(0);\r\n    result.setMilliseconds(0);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function checkResets(targetTime:Date){\r\n  let now = new Date();\r\n  // if `now` is MORE than `timer`, reset\r\n  if(now.valueOf() > targetTime.valueOf()){\r\n    return true;\r\n  }\r\n  return false;\r\n}","import { TimerType } from './schema';\r\nimport { checkResets } from '../helpers/Reset';\r\n\r\nconst DB_VER = 1;\r\n\r\nvar initIDB = new Promise((resolve,reject)=> {\r\n  // dbName will be the DB name, storeName will be the store name.\r\n  if(!('indexedDB' in window)){\r\n    console.warn(\"This browser doesn't support IndexedDB\");\r\n    return;\r\n  }\r\n  // create or open IndexedDB\r\n  var request = window.indexedDB.open('timers',DB_VER);\r\n\r\n  // handle errors\r\n  request.onerror = function(event:any){\r\n    console.error(\"IndexedDB Error: \", request.error);\r\n    reject(\"Failed to open database\");\r\n  };\r\n\r\n  // handle db upgrades\r\n  request.onupgradeneeded = function(event:any) {\r\n    // save the IDBDatabase interface\r\n    var db = event.target.result;\r\n    // Create an objectStore for the database\r\n    var store = db.createObjectStore(\r\n      'timerData',\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n  };\r\n\r\n  request.onsuccess = (event:any) => {\r\n    let db = request.result;\r\n    var transaction = db.transaction('timerData', 'readonly');\r\n    var store = transaction.objectStore('timerData');\r\n    let objStoreReq = store.getAll();\r\n  \r\n    objStoreReq.onsuccess = (event:any) => {\r\n      resolve(cleanseData(event.target.result));\r\n    };\r\n  \r\n    objStoreReq.onerror = (event:any) => {\r\n      console.error(\"Error: \", event.target.error);\r\n      reject(\"Failed to load data\");\r\n    };\r\n  };\r\n});\r\n\r\nfunction addOrUpdateMany(items:TimerType[]) {\r\n  return new Promise((resolve,reject) => {\r\n    var request = window.indexedDB.open('timers',DB_VER);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction('timerData', 'readwrite');\r\n      var store = transaction.objectStore('timerData');\r\n      var objStoreReq;\r\n      items.forEach(item => {\r\n        delete item.countdown;\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item.title);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(item:TimerType){\r\n  return new Promise((resolve,reject) => {\r\n    var request = window.indexedDB.open('timers',DB_VER);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction('timerData', 'readwrite');\r\n      var store = transaction.objectStore('timerData');\r\n      delete item.countdown;\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    var request = window.indexedDB.open('timers',DB_VER);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction('timerData', 'readwrite');\r\n      let store = transaction.objectStore('timerData');\r\n      let infoReq = store.get(id);\r\n      let objStoreReq = store.delete(id);\r\n      let title = \"\";\r\n\r\n      infoReq.onsuccess = (event:any) => {\r\n        title = event.target.result.title;\r\n      };\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        let message = \"\";\r\n        if(title !== \"\"){\r\n          message = title + \" was deleted\";\r\n        } else {\r\n          message = \"Timer was deleted\";\r\n        }\r\n        resolve(message);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(){\r\n  return new Promise((resolve,reject)=>{\r\n    var request = window.indexedDB.open('timers',DB_VER);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction('timerData', 'readwrite');\r\n      let store = transaction.objectStore('timerData');\r\n      let objStoreReq = store.clear();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        let message = \"Data has been successfully deleted\";\r\n        resolve(message);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction cleanseData(data:TimerType[]):TimerType[]{\r\n  data.forEach(item=>{\r\n    // fix date for the reset time\r\n    item.resetTime = new Date(item.resetTime);\r\n\r\n    // fix date for the array of completed times\r\n    let tempSubItems = [];\r\n    item.completed.forEach(subItem=>{\r\n      tempSubItems.push(new Date(subItem));\r\n    });\r\n    item.completed = [...tempSubItems];\r\n\r\n    // check if the item needs to be reset\r\n    if(item.isCompleted && checkResets(item.resetTime)){\r\n      item.isCompleted = false;\r\n      item.resetTime = null;\r\n    }\r\n  });\r\n  return data;\r\n}\r\n\r\nexport { initIDB, addOrUpdateMany, addOrUpdateOne, deleteOne, deleteAll };","import React from 'react';\r\nimport { setReset } from '../helpers/Reset';\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Select from '@material-ui/core/Select';\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport default class AddForm extends React.Component<any,any>{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      required: false,\r\n      isCompleted: false,\r\n      timerType: \"regular\",\r\n      useGlobalTime: true,\r\n      hour: 11,\r\n      minute: 0,\r\n      allDays: false,\r\n      partialDays: false,\r\n      days: {\r\n        sun: false,\r\n        mon: false,\r\n        tue: false,\r\n        wed: false,\r\n        thu: false,\r\n        fri: false,\r\n        sat: false\r\n      },\r\n      unitValue: 1,\r\n      unitType: \"hours\",\r\n      description: \"\",\r\n      category: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = (event:any,name?:string) => {\r\n    const target = event.target;\r\n    let value = target.type === \"checkbox\" ? target.checked : target.value;\r\n\r\n    // check hour/minute values\r\n    switch(name){\r\n      case \"hour\":\r\n        value = this.verifyUnit(parseInt(value),0,24);\r\n        break;\r\n      case \"minute\":\r\n          value = this.verifyUnit(parseInt(value),0,59);\r\n        break;\r\n      case \"unitValue\":\r\n          value = this.verifyUnit(parseInt(value),1);\r\n        break;\r\n    }\r\n\r\n    // setState for certain items is more involved\r\n    switch(name){\r\n      case \"allDays\":\r\n      case \"sun\":\r\n      case \"mon\":\r\n      case \"tue\":\r\n      case \"wed\":\r\n      case \"thu\":\r\n      case \"fri\":\r\n      case \"sat\":\r\n        this.checkDaysState(name, value);\r\n        break;\r\n      default:\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n  };\r\n\r\n  clearForm = () => {\r\n    this.setState({\r\n      title: \"\",\r\n      required: false,\r\n      isCompleted: false,\r\n      timerType: \"regular\",\r\n      hour: 11,\r\n      minute: 0,\r\n      allDays: false,\r\n      partialDays: false,\r\n      days: {\r\n        sun: false,\r\n        mon: false,\r\n        tue: false,\r\n        wed: false,\r\n        thu: false,\r\n        fri: false,\r\n        sat: false\r\n      },\r\n      unitValue: 1,\r\n      unitType: \"hours\",\r\n      description: \"\",\r\n      category: \"\"\r\n    });\r\n  };\r\n\r\n  verifyUnit(value:number,min:number,max?:number):number{\r\n    if(value < min){\r\n      return min;\r\n    } else if(value > max){\r\n      return max;\r\n    } else if(Number.isNaN(value)){\r\n      return min;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  checkDaysState = (name, value) => {\r\n    let daysObj = this.state.days;\r\n    let valuesArr = [];\r\n    if(name === \"allDays\"){\r\n      // for \"allDays\":\r\n      // flip each day's value (true/false)\r\n      daysObj = {\r\n        sun:!daysObj.sun,\r\n        mon:!daysObj.mon,\r\n        tue:!daysObj.tue,\r\n        wed:!daysObj.wed,\r\n        thu:!daysObj.thu,\r\n        fri:!daysObj.fri,\r\n        sat:!daysObj.sat\r\n      };\r\n    } else {\r\n      // otherwise it will be an individual day,\r\n      // so set that to the \"value\"\r\n      daysObj[name] = value;\r\n    }\r\n    // next, create an array out of the object\r\n    // this allows easy checking for partial\r\n    valuesArr = [\r\n      daysObj.sun,\r\n      daysObj.mon,\r\n      daysObj.tue,\r\n      daysObj.wed,\r\n      daysObj.thu,\r\n      daysObj.fri,\r\n      daysObj.sat\r\n    ];\r\n    \r\n    // check if days are all true (none are false)\r\n    if(!valuesArr.includes(false)){\r\n      // then set allDays to true-determinate\r\n      this.setState({\r\n        days:daysObj,\r\n        allDays:true,\r\n        partialDays:false\r\n      });\r\n    }\r\n    // check if days are all false (none are true)\r\n    else if(!valuesArr.includes(true)){\r\n      // then set allDays to false-determinate\r\n      this.setState({\r\n        days:daysObj,\r\n        allDays:false,\r\n        partialDays:false\r\n      });\r\n    }\r\n    // otherwise, set allDays to true-indeterminate\r\n    else {\r\n      this.setState({\r\n        days:daysObj,\r\n        allDays:true,\r\n        partialDays:true\r\n      });\r\n    }\r\n  };\r\n\r\n  intervalPeriod = () => {\r\n    let period = 'i.';\r\n    period += this.state.unitValue + '.';\r\n    period += this.state.unitType;\r\n    return period;\r\n  };\r\n\r\n  regularPeriod = () => {\r\n    let period = '';\r\n    if(this.state.useGlobalTime){\r\n      period = 'rg.0000.00.00.';\r\n      let offsetTotal = (new Date()).getTimezoneOffset();\r\n      let offsetHours = Math.floor(offsetTotal/60);\r\n      let offsetMinutes = offsetTotal-(offsetHours*60);\r\n      period += (this.state.hour+offsetHours) + '.';\r\n      period += (this.state.minute+offsetMinutes) + '.';\r\n    } else {\r\n      period = 'rl.0000.00.00.';\r\n      period += this.state.hour + '.';\r\n      period += this.state.minute + '.';\r\n    }\r\n    period += this.calculateDayOfWeek();\r\n    return period;\r\n  };\r\n\r\n  handleSubmit = (event:any) => {\r\n    event.preventDefault();\r\n\r\n    // calculate the reset period\r\n    let period:String;\r\n    if(this.state.timerType === \"interval\"){\r\n      period = this.intervalPeriod();\r\n    } else {\r\n      period = this.regularPeriod();\r\n    }\r\n\r\n    let completed = [];\r\n    if(this.state.isCompleted){\r\n      completed.push(new Date());\r\n    }\r\n    \r\n    // create a TimerType object based on the forum input\r\n    let timer = {\r\n      id: 0, // this will be set for real in TimerList\r\n      title: this.state.title,\r\n      resetTime: setReset(period),\r\n      required: this.state.required,\r\n      completed: completed,\r\n      isCompleted: this.state.isCompleted,\r\n      period: period,\r\n      description: this.state.description,\r\n      category: this.state.category,\r\n    };\r\n    this.props.addTimer(timer);\r\n  };\r\n\r\n  calculateDayOfWeek(){\r\n    let DoW = \"\";\r\n    if(this.state.days.sun){\r\n      DoW += '0';\r\n    }\r\n    if(this.state.days.mon){\r\n      DoW += '1';\r\n    }\r\n    if(this.state.days.tue){\r\n      DoW += '2';\r\n    }\r\n    if(this.state.days.wed){\r\n      DoW += '3';\r\n    }\r\n    if(this.state.days.thu){\r\n      DoW += '4';\r\n    }\r\n    if(this.state.days.fri){\r\n      DoW += '5';\r\n    }\r\n    if(this.state.days.sat){\r\n      DoW += '6';\r\n    }\r\n    return DoW;\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <form autoComplete=\"off\">\r\n        <h2>Create a Timer</h2>\r\n        <div className=\"basic-info\">\r\n          <TextField required\r\n            id=\"timer-name\"\r\n            name=\"title\"\r\n            label=\"Title\"\r\n            className=\"timer-name-field\"\r\n            value={this.state.title}\r\n            margin=\"normal\"\r\n            onChange={(e)=>this.handleChange(e,\"title\")} />\r\n\r\n          <TextField \r\n            id=\"timer-category\"\r\n            name=\"category\"\r\n            label=\"Category\"\r\n            className=\"timer-category-field\"\r\n            value={this.state.category}\r\n            margin=\"normal\"\r\n            onChange={(e)=>this.handleChange(e,\"category\")} />\r\n\r\n          <FormControlLabel control={\r\n            <Switch checked={this.state.required} onChange={(e)=>this.handleChange(e,\"required\")} />\r\n          } label=\"Important\" className=\"important-field\" />\r\n          <FormControlLabel control={\r\n            <Switch checked={this.state.isCompleted} onChange={(e)=>this.handleChange(e,\"isCompleted\")} />\r\n          } label=\"Create as Completed\" className=\"completed-field\" />\r\n          \r\n          <FormControl component=\"fieldset\" className=\"timer-type-field\">\r\n            <FormLabel component=\"legend\">Timer Type</FormLabel>\r\n            <RadioGroup name=\"timerType\" value={this.state.timerType} onChange={(e)=>this.handleChange(e,\"timerType\")}>\r\n                <FormControlLabel value=\"regular\" control={<Radio />} label=\"Scheduled\" />\r\n                <FormControlLabel value=\"interval\" control={<Radio />} label=\"Repeating\" />\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n        </div>\r\n        <div className=\"specific-info\">\r\n          {this.state.timerType === \"regular\" ?\r\n            <>\r\n              <FormLabel component=\"legend\">When should this timer reset?</FormLabel>\r\n\r\n              <div className=\"time-input\">\r\n                <FormControlLabel control={\r\n                  <Input required\r\n                    id=\"regular-hour\"\r\n                    type=\"number\"\r\n                    name=\"hour\"\r\n                    value={this.state.hour}\r\n                    onChange={(e)=>this.handleChange(e,\"hour\")} />\r\n                } label=\"&nbsp;hour\" />and&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <FormControlLabel control={\r\n                  <Input required\r\n                    id=\"regular-minute\"\r\n                    type=\"number\"\r\n                    name=\"minute\"\r\n                    value={this.state.minute}\r\n                    onChange={(e)=>this.handleChange(e,\"minute\")} />\r\n                } label=\"&nbsp;minutes\" />\r\n              </div>\r\n\r\n              <Tooltip \r\n                placement=\"right\"\r\n                title=\"Recommended for events that happen on a global scale. Disable this option if it is for local events.\">\r\n                <FormControlLabel control={\r\n                  <Switch checked={this.state.useGlobalTime} onChange={(e)=>this.handleChange(e,\"useGlobalTime\")} />\r\n                } label=\"Ignore changes from Daylight Savings Time\" />\r\n              </Tooltip>\r\n\r\n              <br/>\r\n\r\n              <FormControlLabel control=\r\n                {this.state.partialDays ?\r\n                  <Checkbox \r\n                    indeterminate\r\n                    checked={this.state.allDays} \r\n                    onChange={(e)=>this.handleChange(e,\"allDays\")}/>\r\n                :\r\n                  <Checkbox \r\n                    checked={this.state.allDays} \r\n                    onChange={(e)=>this.handleChange(e,\"allDays\")}/>\r\n                } label=\"Toggle All Days\" />\r\n              <div className=\"days-input\">\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.mon} onChange={(e)=>this.handleChange(e,\"mon\")}/>\r\n                } label=\"Monday\" />\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.tue} onChange={(e)=>this.handleChange(e,\"tue\")}/>\r\n                } label=\"Tuesday\" />\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.wed} onChange={(e)=>this.handleChange(e,\"wed\")}/>\r\n                } label=\"Wednesday\" />\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.thu} onChange={(e)=>this.handleChange(e,\"thu\")}/>\r\n                } label=\"Thursday\" />\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.fri} onChange={(e)=>this.handleChange(e,\"fri\")}/>\r\n                } label=\"Friday\" />\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.sat} onChange={(e)=>this.handleChange(e,\"sat\")}/>\r\n                } label=\"Saturday\" />\r\n                <FormControlLabel control={\r\n                    <Checkbox checked={this.state.days.sun} onChange={(e)=>this.handleChange(e,\"sun\")}/>\r\n                } label=\"Sunday\" />\r\n              </div>\r\n            </>\r\n          :\r\n            <>\r\n              <FormLabel component=\"legend\">When should this timer reset?</FormLabel>\r\n              <FormControlLabel control={\r\n                <Input required\r\n                  id=\"interval-unit-value\"\r\n                  type=\"number\"\r\n                  name=\"unitValue\"\r\n                  value={this.state.unitValue}\r\n                  onChange={(e)=>this.handleChange(e,\"unitValue\")} className=\"time-input\" />\r\n              } label={this.state.unitType} />\r\n          \r\n              <InputLabel htmlFor=\"unitType\">Time Period</InputLabel>\r\n              <Select\r\n                native\r\n                value={this.state.unitType}\r\n                onChange={(e)=>this.handleChange(e,\"unitType\")}\r\n                inputProps={{\r\n                  name: 'period',\r\n                  id: 'interval-period',\r\n                }}>\r\n                <option value=\"minutes\">minutes</option>\r\n                <option value=\"hours\">hours</option>\r\n                <option value=\"days\">days</option>\r\n              </Select>\r\n            </>\r\n          }\r\n        </div>\r\n        \r\n        <TextField multiline fullWidth\r\n            id=\"timer-description\"\r\n            name=\"description\"\r\n            label=\"Description\"\r\n            className=\"timer-description-field\"\r\n            value={this.state.description}\r\n            margin=\"normal\"\r\n            onChange={(e)=>this.handleChange(e,\"description\")} />\r\n\r\n        <br/>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>\r\n          Submit\r\n        </Button>&nbsp;\r\n        <Button variant=\"contained\" onClick={this.clearForm}>\r\n          Clear\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { ISnack } from '../data/schema';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nexport default function DisplaySnack(props:ISnack){\r\n  let { isSnackOpen, message, closeSnack } = props;\r\n  return(\r\n    <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'center'\r\n      }}\r\n      open={isSnackOpen}\r\n      autoHideDuration={6000}\r\n      onClose={closeSnack}\r\n      ContentProps={{\r\n        'aria-describedby': 'message-id'\r\n      }}\r\n      message={<span id=\"message-id\">{message}</span>}\r\n    />\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\nimport { deleteAll } from '../data/data';\r\nimport DisplaySnack from './DisplaySnack';\r\n\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\n/* MaterialUI's Dialog Compoents */\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\n\r\ninterface IOptionsProps {\r\n  setOptions:Function,\r\n  optionsState:IOptionsState\r\n}\r\n\r\ninterface IOptionsState {\r\n  hideCompleted:boolean,\r\n  viewSlim:boolean\r\n}\r\n\r\nexport default function Options(props:IOptionsProps){\r\n  let { setOptions, optionsState } = props;\r\n  const [isDeleteOpen, setDeleteOpen] = useState(false);\r\n  const [isSnackOpen, setSnackOpen] = useState(false);\r\n  const [snackMsg, setSnackMsg] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <FormControlLabel control={\r\n        <Switch \r\n          checked={optionsState.hideCompleted} \r\n          onChange={(e)=>setOptions(e,\"hideCompleted\")} />\r\n      } label=\"Hide Completed\" />\r\n      <br/>\r\n      <FormControlLabel control={\r\n        <Switch \r\n          checked={optionsState.viewSlim} \r\n          onChange={(e)=>setOptions(e,\"viewSlim\")} />\r\n      } label=\"Slim Timers\" />\r\n      <br/><br/>\r\n      <Button onClick={()=>setDeleteOpen(true)}>\r\n        Delete my data\r\n      </Button>\r\n      <DeleteConf isOpen={isDeleteOpen} close={setDeleteOpen} setSnack={setSnackOpen} snackMsg={setSnackMsg} />\r\n      <DisplaySnack isSnackOpen={isSnackOpen} closeSnack={setSnackOpen} message={snackMsg} />\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nfunction DeleteConf(props:{isOpen:boolean, close:any, setSnack:any, snackMsg:any}){\r\n  let {isOpen, close, setSnack, snackMsg} = props;\r\n  \r\n  return(\r\n    <Dialog \r\n      onClose={()=>close(false)}\r\n      aria-labelledby=\"dialog-title\"\r\n      open={isOpen}>\r\n      <DialogTitle id=\"dialog-title\">\r\n        Delete?\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          Are you sure you want to delete your data? This action cannot be undone!\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={()=>close(false)}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={()=>deleteHandler(close, setSnack, snackMsg)}>\r\n          Yes, delete it\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction deleteHandler(close:any, setSnack:any, snackMsg:any){\r\n  // start by closing the dialog box\r\n  close(false);\r\n  // then call delete all to clear IndexedDB\r\n  deleteAll().then((message)=>{\r\n    snackMsg(message);\r\n    setSnack(true);\r\n  });\r\n}","import React from 'react';\r\nimport { IDialog } from '../data/schema';\r\n\r\n/* MaterialUI's Dialog Compoents */\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default function DisplayDialog(props:IDialog){\r\n  if(props.timer === undefined){\r\n    return(<></>);\r\n  }\r\n  let { closeDialog, isOpen, timer, deleteItem } = props;\r\n  return(\r\n    <Dialog \r\n      onClose={closeDialog}\r\n      aria-labelledby=\"dialog-title\"\r\n      open={isOpen}>\r\n        <DialogTitle id=\"dialog-title\">\r\n          {timer.title}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {timer.category}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {timer.description}\r\n          </DialogContentText>\r\n          <DialogContentText>\r\n            {timer.completed.length > 0 &&\r\n              \"Last completion: \" +\r\n              timer.completed[timer.completed.length-1].toLocaleString()\r\n            }\r\n            <br/>\r\n            {timer.isCompleted &&\r\n              \"Next reset time: \" +\r\n              timer.resetTime.toLocaleString()\r\n            }\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeDialog}>\r\n            Close\r\n          </Button>\r\n          <Button onClick={()=>deleteItem(props.timer.id,\"dialog\")}>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n    </Dialog>\r\n  );\r\n}","import React, { Component } from 'react';\r\nimport { TimerType } from '../data/schema';\r\nimport './timer.scss';\r\n\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\ninterface ITimer {\r\n  data: TimerType,\r\n  viewSlim: boolean,\r\n  handleChange: Function,\r\n  delete?: Function,\r\n  edit?: Function,\r\n  info?: Function\r\n}\r\n\r\nexport default class Timer extends Component<ITimer,any> {\r\n  constructor(props:ITimer){\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  completedBorderStyle = {\r\n    borderColor: \"#888\",\r\n  }\r\n  completedBGStyle = {\r\n    backgroundColor: \"#888\",\r\n  }\r\n  largePadStyle = {\r\n    top: \"-1px\",\r\n    width: \"15px\",\r\n    height: \"100px\"\r\n  }\r\n  largeCardStyle = {\r\n    height: \"100px\",\r\n    alignItems: \"start\",\r\n  }\r\n  titleStyle = {\r\n    width: \"335px\"\r\n  }\r\n  descriptionStyle = {\r\n    overflowY: \"auto\"\r\n  }\r\n    \r\n  render(){\r\n    let timer = this.props.data;\r\n    let viewSlim = this.props.viewSlim;\r\n    let styles = {\r\n      completedBorder: {},\r\n      completedBG: {},\r\n      card: {},\r\n      pad: {},\r\n      title: {},\r\n      description: {},\r\n    };\r\n    if(!timer){\r\n      return(<></>);\r\n    }\r\n    if(timer.isCompleted){\r\n      styles.completedBorder = this.completedBorderStyle;\r\n      styles.completedBG = this.completedBGStyle;\r\n    }\r\n    if(!viewSlim){\r\n      styles.card = this.largeCardStyle;\r\n      styles.pad = this.largePadStyle;\r\n      styles.description = this.descriptionStyle;\r\n      styles.title = this.titleStyle;\r\n    }\r\n    return(\r\n      <div className=\"timerCard\" style={{...styles.completedBorder,...styles.card}}>{/* whole card area */}\r\n        <div \r\n          className=\"toggleArea\"\r\n          onClick={()=>(this.props.handleChange(timer.id))}>\r\n          <div className=\"pad\" style={{...styles.pad,...styles.completedBG}}>\r\n            {/* Pad Area */}\r\n          </div>\r\n          <div className=\"titleArea\" style={styles.title}> {/* Title Area */}\r\n            <h6>\r\n              {timer.required && \r\n                <span className=\"reqSym\">&#x203C;&#xFE0F;&nbsp;</span>\r\n              }\r\n              {timer.title}\r\n            </h6>\r\n            {timer.countdown !== undefined && timer.countdown !== null ?\r\n              <span className=\"date\">In {timer.countdown}</span>\r\n            : timer.completed.length > 0 ?\r\n              <span className=\"date\">Last completed: {timer.completed[timer.completed.length-1].toDateString()}</span>\r\n            :\r\n              <span className=\"date\"></span>\r\n            }\r\n            {!viewSlim && timer.description !== undefined &&\r\n              <div style={styles.description}>\r\n                {timer.description}\r\n              </div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"actionsArea\"> {/* button area */}\r\n          {viewSlim ?\r\n            <IconButton \r\n              aria-label={timer.title + \" Details\"}\r\n              onClick={()=>this.props.info(timer.id)}>\r\n              <Icon className=\"info\" >info</Icon>\r\n            </IconButton>\r\n          :\r\n            <>\r\n              <IconButton \r\n                aria-label={\"Edit \"+timer.title}\r\n                onClick={()=>console.log(\"Edit Clicked\")}>\r\n                <Icon className=\"edit\">edit</Icon>\r\n              </IconButton>\r\n              <IconButton \r\n                aria-label={\"Delete \"+timer.title}\r\n                onClick={()=>this.props.delete(timer.id,\"timerCard\")}>\r\n                <Icon className=\"delete\">delete_forever</Icon>\r\n              </IconButton>\r\n            </>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { ITimerList } from '../data/schema';\r\nimport Timer from './Timer';\r\n\r\nexport default function ListTimers(props:ITimerList){\r\n  let { filtered, handleChange, deleteItem, viewSlim, openDialog } = props;\r\n  if(viewSlim){\r\n    return(\r\n      <div className=\"flex\">\r\n        {filtered.map((item) => {\r\n          return(\r\n          <div key={item.id}>\r\n            <Timer data={item} viewSlim={viewSlim} handleChange={handleChange} info={openDialog} />\r\n          </div>\r\n        );\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return(\r\n      <div className=\"flex\">\r\n        {filtered.map((item) => {\r\n          return(\r\n          <div key={item.id}>\r\n            <Timer data={item} viewSlim={viewSlim} handleChange={handleChange} delete={deleteItem} />\r\n          </div>\r\n        );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport Welcome from './component/Welcome';\r\nimport Navbar from './component/Navbar';\r\nimport { setReset, checkResets } from './helpers/Reset';\r\nimport { initIDB, addOrUpdateOne, addOrUpdateMany, deleteOne } \r\n  from './data/data';\r\nimport { TimerType } from './data/schema';\r\nimport AddForm from './component/addForm';\r\nimport Options from './component/options';\r\nimport DisplayDialog from './component/DisplayDialog';\r\nimport DisplaySnack from './component/DisplaySnack';\r\nimport ListTimers from './component/ListTimers';\r\nimport './App.scss';\r\n\r\n/* Expansion Panel */\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default class App extends Component<any,any> {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data:[],\r\n      nextReset: null,\r\n      timeout: null,\r\n      countdown: null,\r\n      section:0,\r\n      snack: {\r\n        isOpen:false,\r\n        message:\"\",\r\n      },\r\n      options: {\r\n        hideCompleted: false,\r\n        viewSlim: true,\r\n      },\r\n      dialog: {\r\n        isOpen:false,\r\n        id:null\r\n      }\r\n    };\r\n  }\r\n\r\n  componentWillMount(){\r\n    initIDB.then((data:TimerType[])=>{\r\n      this.setState({\r\n        data:data\r\n      });\r\n      this.createTimeout(data);\r\n      this.createCountdown();\r\n      this.setCategories(data);\r\n    }).catch(message => {\r\n      this.openSnack(message);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    // if a timeout exists, clear it\r\n    if(this.state.timeout !== null){\r\n      clearTimeout(this.state.timeout);\r\n    }\r\n    if(this.state.countdown !== null){\r\n      clearInterval(this.state.countdown);\r\n    }\r\n  }\r\n\r\n  setCategories = (data:TimerType[]) => {\r\n    let categories = [];\r\n    data.forEach(item => {\r\n      if(item.category !== \"\"){\r\n        if(!categories.includes(item.category)){\r\n          categories.push(item.category);\r\n        }\r\n      }\r\n    });\r\n    this.setState({\r\n      categories: categories\r\n    });\r\n  };\r\n\r\n  handleChange = (id:any) => {\r\n    let data = this.state.data;\r\n\r\n    // set the proper item to complete & add the current Date\r\n    data.forEach(item=>{\r\n      if(item.id === id){\r\n        // set the item based on checkbox state\r\n        item.isCompleted = !item.isCompleted;\r\n        // if the checkbox IS checked, do extra steps\r\n        if(item.isCompleted){\r\n          item.completed.push(new Date());\r\n          if(item.completed.length > 7){\r\n            // if there are more than 7 date entries, remove the oldest\r\n            item.completed.shift();\r\n          }\r\n          item.resetTime = setReset(item.period);\r\n        } else {\r\n          // if the checkbox IS NOT checked, remove the latest date & reset date\r\n          item.completed.pop();\r\n          item.countdown = null;\r\n          item.resetTime = null;\r\n        }\r\n        addOrUpdateOne(item).then((message:string)=>{\r\n          this.openSnack(message);\r\n        }).catch((message:string)=>{\r\n          this.openSnack(message);\r\n        });\r\n      }\r\n    });\r\n    // apply the new data to STATE\r\n    this.setState({\r\n      data:data\r\n    });\r\n    // re-create timeout based on the new data\r\n    this.createTimeout(data);\r\n  };\r\n\r\n  delete = (id:any,source?:string) => {\r\n    deleteOne(id).then((message:string)=>{\r\n      this.openSnack(message);\r\n      let data = [];\r\n      this.state.data.forEach(entry => {\r\n        if(entry.id !== id){\r\n          data.push(entry);\r\n        }\r\n      });\r\n      this.setCategories(data);\r\n      this.setState({\r\n        data:data\r\n      });\r\n      // other option is \"timerCard\"\r\n      if(source === \"dialog\"){\r\n        this.closeDialog(null);\r\n      }\r\n    }).catch((message:string)=>{\r\n      this.openSnack(message);\r\n    });\r\n  };\r\n\r\n  handleReset = () => {\r\n    let hasReset = 0;\r\n    let data = this.state.data;\r\n    data.forEach(item => {\r\n      if(item.isCompleted === true && checkResets(item.resetTime)){\r\n        item.resetTime = null;\r\n        item.isCompleted = false;\r\n        hasReset++;\r\n      }\r\n    });\r\n    if(hasReset > 0){\r\n      addOrUpdateMany(data).then(()=>{\r\n        this.createTimeout(data);\r\n        this.setState({\r\n          data: data\r\n        });\r\n        if(hasReset === 1){\r\n          this.openSnack(\"A timer has reset\");\r\n        } else {\r\n          this.openSnack(hasReset + \" timers have reset\");\r\n        }\r\n      }).catch((message) => {\r\n        this.openSnack(message);\r\n      });\r\n    }\r\n  };\r\n\r\n  createTimeout = (data?:TimerType[]) => {\r\n    // clear an existing timeout before creating a new one\r\n    if(this.state.timeout !== null){\r\n      clearTimeout(this.state.timeout);\r\n    }\r\n    // if no data variable was passed, use state's data\r\n    if(data === undefined){\r\n      data = this.state.data;\r\n    }\r\n    // set default MS to 24h\r\n    let timeoutMS = 24 * 60 * 60 * 1000;\r\n    // nextReset will hold the date of the next timeout check\r\n    let nextReset:Date;\r\n    let now = new Date();\r\n    data.forEach(item=>{\r\n      if(item.isCompleted){\r\n        if((item.resetTime.valueOf()-now.valueOf()) < timeoutMS){\r\n          // set the timeoutMS to be the MS between now and timer\r\n          timeoutMS = item.resetTime.valueOf() - now.valueOf();\r\n          nextReset = item.resetTime;\r\n        }\r\n      }\r\n    });\r\n    // add 10 seconds to timeoutMS for a buffer period\r\n    timeoutMS += 10000;\r\n    let timeout = setTimeout(()=>this.handleReset(),timeoutMS);\r\n    // add data, timeout, and nextReset to STATE\r\n    this.setState({\r\n      nextReset:nextReset,\r\n      timeout:timeout\r\n    });\r\n  };\r\n\r\n  createCountdown = () => {\r\n    if(this.state.hideCompleted){\r\n      return;\r\n    };\r\n    // clear an existing countdown before creating a new one\r\n    if(this.state.countdown !== null){\r\n      clearInterval(this.state.countdown);\r\n    }\r\n    // if the user has chosen to hide completed, don't create a timer\r\n    if(this.state.hideCompleted){\r\n      return;\r\n    };\r\n    // set interval to every 10 sec\r\n    let intervalMS = 10000;\r\n\r\n    let interval = setInterval(()=>this.tickCountdown(),intervalMS);\r\n    // add interval to STATE\r\n    this.setState({\r\n      countdown:interval\r\n    });\r\n  }\r\n\r\n  tickCountdown = () => {\r\n    let now = new Date();\r\n    let data = this.state.data;\r\n    data.forEach(item=>{\r\n      if(item.isCompleted){\r\n        // set the data.countdown to be a string\r\n        // representing the MS between now and timer\r\n        let remainingMS = item.resetTime.valueOf() - now.valueOf();\r\n        let dayMS = 1000 * 60 * 60 * 24;\r\n        let hourMS = 1000 * 60 * 60;\r\n        let minuteMS = 1000 * 60;\r\n        let secondMS = 1000;\r\n        let days = Math.floor(remainingMS / dayMS);\r\n        remainingMS -= days * dayMS;\r\n        let hours = Math.floor(remainingMS / hourMS);\r\n        remainingMS -= hours * hourMS;\r\n\r\n        // create the string next\r\n        let cdString = \"\";\r\n\r\n        if(days > 0){\r\n          cdString += days + \" days and \";\r\n          if(hours > 0){\r\n            cdString += hours + \" hours\";\r\n          }\r\n        } else {\r\n          let minutes = Math.floor(remainingMS / minuteMS);\r\n          remainingMS -= minutes * minuteMS;\r\n          let seconds = Math.floor(remainingMS / secondMS);\r\n          // don't care about anything remaining after seconds\r\n\r\n          cdString += hours.toString().padStart(2,\"0\") + \":\";\r\n          cdString += minutes.toString().padStart(2,\"0\") + \":\";\r\n          cdString += seconds.toString().padStart(2,\"0\");\r\n        }\r\n        item.countdown = cdString;\r\n      }\r\n    });\r\n    this.setState({\r\n      data:data\r\n    });\r\n  }\r\n\r\n  addTimer = (data:TimerType) => {\r\n    let dataArr = this.state.data;\r\n    // add an id to the data\r\n    let nID = 0;\r\n    // check if nID exists in the data already\r\n    let ids = [];\r\n    dataArr.forEach(item=>{\r\n      ids.push(item.id);\r\n    });\r\n    while(ids.includes(nID)){\r\n      nID++;\r\n    }\r\n    data.id = nID;\r\n    addOrUpdateOne(data).then((message:string)=>{\r\n      this.openSnack(message);\r\n\r\n      dataArr.push(data);\r\n  \r\n      let section = this.state.section;\r\n      let categories = this.state.categories;\r\n      if(data.category !== \"\" && !categories.includes(data.category)){\r\n        this.setCategories(dataArr);\r\n      }\r\n  \r\n      this.setState({\r\n        data: dataArr,\r\n        displayAddForm: false,\r\n        categories: categories,\r\n        section: section\r\n      });\r\n    }).catch((message)=>{\r\n      this.openSnack(message);\r\n    });\r\n  };\r\n\r\n  handleTabChange = (event:any,newValue:number) => {\r\n    this.setState({\r\n      section:newValue\r\n    });\r\n  };\r\n\r\n  openSnack = (message:string) => {\r\n    this.setState({\r\n      snack: {\r\n        isOpen: true,\r\n        message: message\r\n      }\r\n    });\r\n  };\r\n\r\n  closeSnack = (\r\n    event:React.SyntheticEvent|React.MouseEvent,\r\n    reason?:string) => {\r\n    // reason can be \"clickaway\" or \"timeout\"\r\n    this.setState({\r\n      snack: {\r\n        isOpen:false,\r\n        message:\"\"\r\n      }\r\n    });\r\n  };\r\n\r\n  openDialog = (id:any) => {\r\n    let index:number;\r\n    this.state.data.forEach((item,i) => {\r\n      if(item.id === id){\r\n        index = i;\r\n      }\r\n    });\r\n    this.setState({\r\n      dialog: {\r\n        isOpen: true,\r\n        id: index\r\n      }\r\n    });\r\n  };\r\n\r\n  closeDialog = (\r\n    event:React.SyntheticEvent|React.MouseEvent,\r\n    reason?:string) => {\r\n    this.setState({\r\n      dialog:{\r\n        isOpen:false,\r\n        id:null\r\n      }\r\n    });\r\n  };\r\n\r\n  setOptions = (event:any,name:string) => {\r\n    let value = event.target.type === 'checkbox' ? \r\n      event.target.checked : \r\n      event.target.value;\r\n    this.setState({\r\n      options: {\r\n        ...this.state.options,\r\n        [name]: value,\r\n      }\r\n    });\r\n    if(name === \"hideCompleted\"){\r\n      if(value){\r\n        clearInterval(this.state.countdown);\r\n      } else {\r\n        this.createCountdown();\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let sectionId = {\r\n      timers: 0,\r\n      addTimer: 1,\r\n      options: 2\r\n    };\r\n    return (\r\n      <article id=\"article\">\r\n        <Welcome />\r\n        <Navbar \r\n          value={this.state.section} \r\n          handleTabChange={this.handleTabChange}\r\n          categories={this.state.categories} />\r\n\r\n        <Typography\r\n          component=\"section\"\r\n          role=\"tabpanel\"\r\n          hidden={this.state.section !== sectionId.timers}\r\n          id=\"top\">\r\n\r\n          {/* Required Timers */}\r\n          <ExpansionPanel defaultExpanded={true}>\r\n            <ExpansionPanelSummary expandIcon={<Icon>expand_more</Icon>}>\r\n              Important Timers\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <ListTimers \r\n                filtered={filterList(this.state.data, this.state.options.hideCompleted)\r\n                  .filter(item=>(item.required === true))} \r\n                handleChange={this.handleChange}\r\n                viewSlim={this.state.options.viewSlim}\r\n                openDialog={this.openDialog}\r\n                deleteItem={this.delete} />\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        \r\n          {/* Timers by Category */}\r\n          {this.state.categories !== undefined && this.state.categories.map((category)=>\r\n            <ExpansionPanel key={category}>\r\n              <ExpansionPanelSummary expandIcon={<Icon>expand_more</Icon>}>\r\n                {category}\r\n              </ExpansionPanelSummary>\r\n              <ExpansionPanelDetails>\r\n                <ListTimers \r\n                  filtered={filterList(this.state.data, this.state.options.hideCompleted)\r\n                    .filter(item=>(item.category === category))} \r\n                  handleChange={this.handleChange}\r\n                  viewSlim={this.state.options.viewSlim}\r\n                  openDialog={this.openDialog}\r\n                  deleteItem={this.delete} />\r\n              </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n          )}\r\n        </Typography>\r\n\r\n        {/* Tab Panel for Adding a Timer */}\r\n        <Typography\r\n          component=\"section\"\r\n          role=\"tabpanel\"\r\n          hidden={this.state.section !== sectionId.addTimer}\r\n          id=\"addTimer\">\r\n          <AddForm addTimer={this.addTimer} />\r\n        </Typography>\r\n        \r\n        {/* Tab Panel for Options */}\r\n        <Typography\r\n          component=\"section\"\r\n          role=\"tabpanel\"\r\n          hidden={this.state.section !== sectionId.options}\r\n          id=\"options\">\r\n          <h2>Options</h2>\r\n          <Options setOptions={this.setOptions} optionsState={this.state.options} />\r\n        </Typography>\r\n\r\n        <DisplayDialog\r\n          closeDialog={this.closeDialog}\r\n          isOpen={this.state.dialog.isOpen}\r\n          deleteItem={this.delete}\r\n          timer={this.state.data[this.state.dialog.id]} />\r\n\r\n        <DisplaySnack \r\n          isSnackOpen={this.state.snack.isOpen} \r\n          message={this.state.snack.message}\r\n          closeSnack={this.closeSnack} />\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nfunction filterList(data:TimerType[], hideCompleted:boolean){\r\n  let filtered = data;\r\n  if(hideCompleted){\r\n    filtered = filtered.filter(item => !item.isCompleted);\r\n  }\r\n  return filtered;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}